name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
Customer_Data <- read_excel("C:/0000/05 Github/Codes/Pet Projects/Supermarket dashboard/Customer Data.xlsx")
names<-c(2:8)
Customer_Data[,names]<-lapply(Customer_Data[,names],factor)
Customer_Data$INCOME_DESC<-factor(Customer_Data$INCOME_DESC, levels = c("Under 15K","15-24K","25-34K",
"35-49K","50-74K","75-99K","100-124K","125-149K","150-174K","175-199K","200-249K","250K+"))
Customer_Data$RECENCY <-as.character(Customer_Data$RECENCY)
Customer_Data$RECENCY <- factor(Customer_Data$RECENCY, levels = c(1,2,3,4)) # Higher the recency, more recently the customer has shopped
Customer_Data_Model<-Customer_Data[,-c(1,10,11)]   # Removing FAMILY_TOT_VISITS & FAMILY_VALUE because they are related and
gower_dist <- daisy(Customer_Data[,-1],metric = "gower", type = list(logratio = c(8,11)))
## Calculate optimal number of clusters
sil_width <- c(NA)
for(i in 2:20){
pam_fit<-pam(gower_dist, diss = TRUE,k = i)  # PAM: Partitioning Around Medoids
sil_width[i]<-pam_fit$silinfo$avg.width
}
tab<-data.frame(x=1:20,sil_width=sil_width)
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
Customer_Data %>%
group_by(Group) %>%
summarise(Avg_Yearly_Sales = mean(YEARLY_SALES),Avg_Yearly_Visits = mean(YEARLY_VISITS),Avg_Yearly_value = mean(YEARLY_VALUE))
rm(list=ls())
library("caret")
library("boot")     # For calcualting errors from cross-validation
library("rpart")    # For random forest
library("rattle")   # For visualizing the random forest tree
library("ggplot2")  # For visualizations
library("dplyr")    # For streamlining the code for manipulating the datasset
library("cluster")
library("Rtsne")    # For visualizing the clustering in 2-D
library("tibble")
library("xgboost")  # For Xgboost
library("glmnet")   # For Lasso
library("neuralnet")# For neuralnet
library("nnet")
library("reshape2") # For boxplots
library("cluster")  # For computing all the pairwise dissimilarities (distances) between observations in the data set for clustering
library("readxl")
Customer_Data <- read_excel("C:/0000/05 Github/Codes/Pet Projects/Supermarket dashboard/Customer Data.xlsx")
names<-c(2:8)
Customer_Data[,names]<-lapply(Customer_Data[,names],factor)
Customer_Data$INCOME_DESC<-factor(Customer_Data$INCOME_DESC, levels = c("Under 15K","15-24K","25-34K",
"35-49K","50-74K","75-99K","100-124K","125-149K","150-174K","175-199K","200-249K","250K+"))
Customer_Data$RECENCY <-as.character(Customer_Data$RECENCY)
Customer_Data$RECENCY <- factor(Customer_Data$RECENCY, levels = c(1,2,3,4)) # Higher the recency, more recently the customer has shopped
Customer_Data_Model<-Customer_Data[,-c(1,10,11)]   # Removing FAMILY_TOT_VISITS & FAMILY_VALUE because they are related and
gower_dist <- daisy(Customer_Data[,-1],metric = "gower", type = list(logratio = c(8,11)))
## Calculate optimal number of clusters
sil_width <- c(NA)
for(i in 2:20){
pam_fit<-pam(gower_dist, diss = TRUE,k = i)  # PAM: Partitioning Around Medoids
sil_width[i]<-pam_fit$silinfo$avg.width
}
tab<-data.frame(x=1:20,sil_width=sil_width)
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 8)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
names(Customer_Data)
# Plots Segments vs YEARLY_SALES
# Arranges on the x-axis according to the YEARLY_SALES
fac <- with(Customer_Data, reorder(as.factor(Group), YEARLY_SALES, median, order = TRUE))
Customer_Data$Group <- factor(Customer_Data$Group, levels = levels(fac))
ggplot(Customer_Data,aes(x = as.factor(Group), y = YEARLY_SALES)) +
geom_boxplot(aes(fill = as.factor(Group))) +
ggtitle("Customer Segment vs YEARLY_SALES")
# Plots Segments vs YEARLY_VISITS
fac <- with(Customer_Data, reorder(as.factor(Group), YEARLY_VISITS, median, order = TRUE))
Customer_Data$Group <- factor(Customer_Data$Group, levels = levels(fac))
ggplot(Customer_Data,aes(x = as.factor(Group), y = YEARLY_VISITS)) +
geom_boxplot(aes(fill = as.factor(Group))) +
ggtitle("Customer Segment vs YEARLY_VISITS")
# Plots Segments vs YEARLY_VALUE
fac <- with(Customer_Data, reorder(as.factor(Group), YEARLY_VALUE, median, order = TRUE))
Customer_Data$Group <- factor(Customer_Data$Group, levels = levels(fac))
ggplot(Customer_Data,aes(x = as.factor(Group), y = YEARLY_VALUE)) +
geom_boxplot(aes(fill = as.factor(Group))) +
ggtitle("Customer Segment vs YEARLY_VALUE")
# Plots Segments vs MONETARY
fac <- with(Customer_Data, reorder(as.factor(Group), MONETARY, median, order = TRUE))
Customer_Data$Group <- factor(Customer_Data$Group, levels = levels(fac))
ggplot(Customer_Data,aes(x = as.factor(Group), y = MONETARY)) +
geom_boxplot(aes(fill = as.factor(Group))) +
ggtitle("Customer Segment vs MONETARY")
names(Customer_Data)
# Plots Segments vs FREQUENCY
fac <- with(Customer_Data, reorder(as.factor(Group), FREQUENCY, median, order = TRUE))
Customer_Data$Group <- factor(Customer_Data$Group, levels = levels(fac))
ggplot(Customer_Data,aes(x = as.factor(Group), y = FREQUENCY)) +
geom_boxplot(aes(fill = as.factor(Group))) +
ggtitle("Customer Segment vs FREQUENCY")
Customer_Data %>%
group_by(Group) %>%
summarise(Avg_Yearly_Sales = mean(YEARLY_SALES),Avg_Yearly_Visits = mean(YEARLY_VISITS),Avg_Yearly_value = mean(YEARLY_VALUE))
Customer_Data %>%
group_by(Group) %>%
summarise(Avg_Yearly_Sales = mean(YEARLY_SALES),
Avg_Yearly_Visits = mean(YEARLY_VISITS),
Avg_Yearly_value = mean(YEARLY_VALUE),
Avg_Monetary_value = mean(MONETARY),
Avg_Frequency_value = mean(FREQUENCY)
)
############################## Linear regression ############################################################
lm.err<-c(NA)
for(i in 1:10){
set.seed(i)
fit<-glm(YEARLY_SALES ~ .,data = Customer_Data_Model) # Fits a linear regression
lm.err[i]<-cv.glm(Customer_Data_Model,fit,K=10)$delta[2]  # Taking the Bias adjusted error from cross-validation results
}
lm.err<-sqrt(mean(lm.err)) # Mean Squared Error: After running 10-K fold cross-validation 10 times, very high
# Error: 1086.6240
par(mfrow=c(2,2))
plot(fit)
lm.err
set.seed(05052018)
index<-sample(1:nrow(Customer_Data_Model),nrow(Customer_Data_Model)*0.8,replace = TRUE)
training<-Customer_Data_Model[index,]
testing<-Customer_Data_Model[-index,]
null<-lm(FAMILY_TOT_SALES~1,data = training)
full<-lm(FAMILY_TOT_SALES~.,data = training)
step.fit<-step(null,scope = list(upper = full, lower = null),direction = "both",trace = TRUE, k = 2)
set.seed(05052018)
index<-sample(1:nrow(Customer_Data_Model),nrow(Customer_Data_Model)*0.8,replace = TRUE)
training<-Customer_Data_Model[index,]
testing<-Customer_Data_Model[-index,]
null<-lm(YEARLY_SALES~1,data = training)
full<-lm(YEARLY_SALES~.,data = training)
step.fit<-step(null,scope = list(upper = full, lower = null),direction = "both",trace = TRUE, k = 2)
step.fit<-step(null,scope = list(upper = full, lower = null),direction = "both",trace = TRUE, k = log(nrow(training)))
# YEARLY_SALES ~ MONETARY + INCOME_DESC
lm.fit<-lm(YEARLY_SALES ~ MONETARY + INCOME_DESC,data=training)
lm.fit.err<-sqrt(sum((predict(lm.fit,testing) - testing$YEARLY_SALES)^2)/nrow(testing))
lm.fit.err
lm.err
lm.err<-sqrt(mean(lm.err)) # Mean Squared Error: After running 10-K fold cross-validation 10 times, very high
lm.err
############################## Linear regression ############################################################
lm.err<-c(NA)
for(i in 1:10){
set.seed(i)
fit<-glm(YEARLY_SALES ~ .,data = Customer_Data_Model) # Fits a linear regression
lm.err[i]<-cv.glm(Customer_Data_Model,fit,K=10)$delta[2]  # Taking the Bias adjusted error from cross-validation results
}
lm.err<-sqrt(mean(lm.err)) # Mean Squared Error: After running 10-K fold cross-validation 10 times, very high
############################## Linear regression ############################################################
lm.err<-c(NA)
for(i in 1:10){
set.seed(i)
fit<-glm(YEARLY_SALES ~ .,data = Customer_Data_Model) # Fits a linear regression
lm.err[i]<-cv.glm(Customer_Data_Model,fit,K=10)$delta[2]  # Taking the Bias adjusted error from cross-validation results
}
lm.err<-mean(lm.err) # Mean Squared Error: After running 10-K fold cross-validation 10 times, very high
lm.err
lm.err<-sqrt(mean(lm.err)) # Mean Squared Error: After running 10-K fold cross-validation 10 times, very high
lm.err
set.seed(05052018)
index<-sample(1:nrow(Customer_Data_Model),nrow(Customer_Data_Model)*0.8,replace = TRUE)
training<-Customer_Data_Model[index,]
testing<-Customer_Data_Model[-index,]
null<-lm(YEARLY_SALES~1,data = training)
full<-lm(YEARLY_SALES~.,data = training)
step.fit<-step(null,scope = list(upper = full, lower = null),direction = "both",trace = TRUE, k = log(nrow(training))) # BIC
step.fit<-step(null,scope = list(upper = full, lower = null),direction = "both",trace = TRUE, k = 2) #AIC
# Both are giving the same model
# YEARLY_SALES ~ MONETARY + INCOME_DESC
lm.fit<-lm(YEARLY_SALES ~ MONETARY + INCOME_DESC,data=training)
lm.fit.err<-sqrt(sum((predict(lm.fit,testing) - testing$YEARLY_SALES)^2)/nrow(testing))
# 1202.312007
lm.fit.err
################################ Lasso Regression ###########################################################
y.train<-as.matrix(training[,8])   # Response in training has to be in matrix form for glmnet
x.train<-as.matrix(model.matrix(YEARLY_SALES ~.,training)[,-1])
# Predictors in training has to be in matrix form for glmnet
# model.matrix creates dummy variable for each level of each categorical variable
cv.lasso<-cv.glmnet(x = x.train,y = y.train, alpha = 1)
lasso<-glmnet(x = x.train,y = y.train, alpha = 1)
plot(cv.lasso)  # Plots: MSE vs Lambda
plot(lasso)   # Plots: Coefficients vs Lambda
best_lam<-cv.lasso$lambda.min  # Best lambda that gives minimum mse
best_lam
#Topic: Binomial Distribution Visualization in R
#Author: Piyush Verma
#College: University of Cincinnati
#Date:  10/10/2017
install.packages("manipulate")  #Great package to change parameters dynamically
library("manipulate")
manipulate(
{
hist(rbinom(trials,size = trials,p=probability)
,xlim = c(0,trials)
,xlab="Number of successes"
,ylab="Probability"
,probability = TRUE
,main = paste("Binomial distribution of ",trials,"trials with success probability = ", round(probability,2)) #Dynamic title
,col = "blue"
)
lines(density(rbinom(trials,size = trials,p=probability),na.rm = TRUE), col="darkgreen", lwd=4)
p<-dbinom(0:trials,size = trials,p=probability)
x<-0:trials
arr<-p*x
exp<-sum(arr)
legend("topright",legend = parse(text = sprintf('paste(mean,\' = %s\')',round(exp,2))))
}
,trials=slider(1,500)
,probability=slider(0,1)
)
##############################
## Segmentation
##############################
library("rattle")   # For visualizing the random forest tree
library("ggplot2")  # For visualizations
library("cluster")
library("Rtsne")    # For visualizing the clustering in 2-D
library("RODBC")    # For connecting SQL RFM view with R
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=SCOTT\\SQLEXPRESS; Database=SUPERMARKET;Uid=; Pwd=; trusted_connection=yes")
Customer_Data <- sqlQuery(dbconnection,paste("select * from RFM;"))
odbcClose(dbconnection)
View(Customer_Data)
############################## Clustering of the Customers ################################################
## Calculate Gower Distance
gower_dist <- daisy(Customer_Data[,-1],metric = "gower", type = list(logratio = c(8:13)))
## Calculate optimal number of clusters
sil_width <- c(NA)
for(i in 2:20){
pam_fit<-pam(gower_dist, diss = TRUE,k = i)  # PAM: Partitioning Around Medoids
sil_width[i]<-pam_fit$silinfo$avg.width
}
tab<-data.frame(x=1:20,sil_width=sil_width)
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
##############################
## Segmentation
##############################
library("rattle")   # For visualizing the random forest tree
library("ggplot2")  # For visualizations
library("cluster")
library("Rtsne")    # For visualizing the clustering in 2-D
library("RODBC")    # For connecting SQL RFM view with R
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
libary("dplyr")
library("dplyr")
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 5)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 8)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
Customer_Data2<-melt(Customer_Data,Group=Group,measure.vars = )
ggplot(data=Customer_Data)+geom_boxplot(aes(x=Group,y=ANNUAL_SALES,color = Group))+facet_wrap(~Group)
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
names(Customer_Data)
Customer_Data <- sqlQuery(dbconnection,paste("select * from RFM;"))
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=SCOTT\\SQLEXPRESS; Database=SUPERMARKET;Uid=; Pwd=; trusted_connection=yes")
Customer_Data <- sqlQuery(dbconnection,paste("select * from RFM;"))
odbcClose(dbconnection)
############################## Clustering of the Customers ################################################
## Calculate Gower Distance
gower_dist <- daisy(Customer_Data[,-1],metric = "gower", type = list(logratio = c(8:13)))
## Calculate optimal number of clusters
sil_width <- c(NA)
for(i in 2:20){
pam_fit<-pam(gower_dist, diss = TRUE,k = i)  # PAM: Partitioning Around Medoids
sil_width[i]<-pam_fit$silinfo$avg.width
}
tab<-data.frame(x=1:20,sil_width=sil_width)
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
names(Customer_Data)
result<-Customer_Data %>%
group_by(Group) %>%
summarize(Avg_sales = mean(ANNUAL_SALES),
Avg_visits = mean(ANNUAL_VISITS),
Avg_basket_value = mean(ANNUAL_BASKET_VALUE),
Avg_Recency = mean(RECENCY),
Avg_Frequency = mean(FREQUENCY),
Avg_MOnetary = mean(MONETARY)
) %>%
arrange(desc(Avg_sales),desc(Avg_visits))
result
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")  # For visualizations
library("cluster")  # For calculating the Gower Distance
library("Rtsne")    # For visualizing the clustering in 2-D
library("RODBC")    # For connecting SQL RFM view with R
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=SCOTT\\SQLEXPRESS; Database=SUPERMARKET;Uid=; Pwd=; trusted_connection=yes")
Customer_Data <- sqlQuery(dbconnection,paste("select * from RFM;"))
odbcClose(dbconnection)
## Calculate Gower Distance
gower_dist <- daisy(Customer_Data[,-1],metric = "gower", type = list(logratio = c(8:13)))
# Log transformation for positively skewed variables: FAMILY_TOT_SALES, FAMILY_TOT_VISITS
## Calculate optimal number of clusters
sil_width <- c(NA)
for(i in 2:20){
pam_fit<-pam(gower_dist, diss = TRUE,k = i)  # PAM: Partitioning Around Medoids
sil_width[i]<-pam_fit$silinfo$avg.width
}
tab<-data.frame(x=1:20,sil_width=sil_width)
ggplot(data=tab,aes(x = x,y = sil_width))+geom_point(cex=3,col="red")+geom_line()+ggtitle("Silhoutte Width Vs Number of clusters")+theme(plot.title = element_text(hjust=0.5))+xlab("Number of clusters")
## Creating clusters
pam_fit<-pam(gower_dist, diss=TRUE, k = 7)
Customer_Data<-cbind(Customer_Data, Group = pam_fit$clustering)
## Visualizing the clusters
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Customer_Data$H_KEY)
ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster)) + ggtitle("Customer Segments") + theme(plot.title = element_text(hjust = 0.5))
library("kableExtra")
library("kableExtra")
result<-Customer_Data %>%
group_by(Group) %>%
summarize(Avg_sales = mean(ANNUAL_SALES),
Avg_visits = mean(ANNUAL_VISITS),
Avg_basket_value = mean(ANNUAL_BASKET_VALUE),
Avg_Recency = mean(RECENCY),
Avg_Frequency = mean(FREQUENCY),
Avg_MOnetary = mean(MONETARY)
) %>%
arrange(desc(Avg_sales),desc(Avg_visits)) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
})
result<-Customer_Data %>%
group_by(Group) %>%
summarize(Avg_sales = mean(ANNUAL_SALES),
Avg_visits = mean(ANNUAL_VISITS),
Avg_basket_value = mean(ANNUAL_BASKET_VALUE),
Avg_Recency = mean(RECENCY),
Avg_Frequency = mean(FREQUENCY),
Avg_MOnetary = mean(MONETARY)
) %>%
arrange(desc(Avg_sales),desc(Avg_visits))
result
result %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
})
str(result)
result %>%
kable() %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
})
?spec_color
spec_color(x=seq()1:5)
seq(1,5)
spec_color(x=seq(1,5))
result %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
result<-Customer_Data %>%
group_by(Group) %>%
summarize(Avg_sales = mean(ANNUAL_SALES),
Avg_visits = mean(ANNUAL_VISITS),
Avg_basket_value = mean(ANNUAL_BASKET_VALUE),
Avg_Recency = mean(RECENCY),
Avg_Frequency = mean(FREQUENCY),
Avg_MOnetary = mean(MONETARY)
) %>%
arrange(desc(Avg_sales),desc(Avg_visits)) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
Customer_Data %>%
group_by(Group) %>%
summarize(Avg_sales = round(mean(ANNUAL_SALES),2),
Avg_visits = round(mean(ANNUAL_VISITS),2),
Avg_basket_value = round(mean(ANNUAL_BASKET_VALUE),2),
Avg_Recency = round(mean(RECENCY),2),
Avg_Frequency = round(mean(FREQUENCY),2),
Avg_Monetary = round(mean(MONETARY),2),
Count_of_Members = n()
)
Customer_Data %>%
muate(Group = as.factor(Group)) %>%
group_by(Group) %>%
summarize(Avg_sales = round(mean(ANNUAL_SALES),2),
Avg_visits = round(mean(ANNUAL_VISITS),2),
Avg_basket_value = round(mean(ANNUAL_BASKET_VALUE),2),
Avg_Recency = round(mean(RECENCY),2),
Avg_Frequency = round(mean(FREQUENCY),2),
Avg_Monetary = round(mean(MONETARY),2),
Count_of_Members = n()
) %>%
arrange(Group) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
Customer_Data %>%
mutate(Group = as.factor(Group)) %>%
group_by(Group) %>%
summarize(Avg_sales = round(mean(ANNUAL_SALES),2),
Avg_visits = round(mean(ANNUAL_VISITS),2),
Avg_basket_value = round(mean(ANNUAL_BASKET_VALUE),2),
Avg_Recency = round(mean(RECENCY),2),
Avg_Frequency = round(mean(FREQUENCY),2),
Avg_Monetary = round(mean(MONETARY),2),
Count_of_Members = n()
)
shiny::runApp('C:/0000/04-Projects/Predicting text using N-Grams/App Codes and Material')
