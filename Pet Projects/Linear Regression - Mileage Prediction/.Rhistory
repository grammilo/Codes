agg_data<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:20,]
rm(agg_data)
agg_data<-aggregate(nypd2$CMPLNT_NUM,by=list(nypd2$OFNS_DESC),FUN=function(x)length(unique(x)))
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:20,]
agg_data<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:20,]
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),]
order(agg_data$Crime_count, decreasing = TRUE)
agg_data<-aggregate(nypd2$CMPLNT_NUM,by=list(nypd2$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime_count")
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:20,]
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
barplot(agg_data2)
barplot(table(agg_data2))
rm(agg_data,agg_data2)
agg_data<-aggregate(nypd2$CMPLNT_NUM,by=list(nypd2$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime_count")
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:20,]
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:5,]
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
plot_ly(agg_data2,x=agg_data2$Crime,y=agg_data2$Crime_count,type="bar")
barplot(agg_data2)
barplot(agg_data2$Crime_count)
barplot(x=agg_data2$Crime,agg_data2$Crime_count)
View(agg_data2)
library(plyr)
nameS(agg_data)
names(agg_data)
arrange(agg_data,desc(Crime_count),n=10)
library(plyr)
arrange(agg_data,desc(Crime_count),n=10)
head(arrange(agg_data,desc(Crime_count)),n=10)
agg_data3<-head(arrange(agg_data,desc(Crime_count)),n=10)
plot_ly(agg_data3,x=~Crime,y=~Crime_count,type="bar")
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
agg_data<-aggregate(nypd2$CMPLNT_NUM,by=list(nypd2$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime_count")
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:1,]
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
agg_data2<-agg_data[order(agg_data$Crime_count, decreasing = TRUE),][1:3,]
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar")
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar",color = ~Crime)
plot_ly(agg_data2,x=~Crime,y=~Crime_count,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
agg_data<-aggregate(nypd2$CMPLNT_NUM,by=list(nypd2$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
agg_data2<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:10,]
plot_ly(agg_data2,x=~Crime,y=~Crime count,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
plot_ly(agg_data2,x=~Crime,y=~`Crime count``,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
dq
wsdtwr25
)
)))
r q4r43
2exit()
exit()
qwDE
plot_ly(agg_data2,x=~Crime,y=~`Crime count``,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
plot_ly(agg_data2,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
agg_data2<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(agg_data2,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
View(agg_data2)
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
nypd_cr_sorted<-nypd2[nypd2$OFNS_DESC==cr,]
yr<-2008
cr<-"PETIT LARCENY"
nypd_yr_sorted<-nypd2[nypd2$year==yr,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
nypd_cr_sorted<-nypd2[nypd2$OFNS_DESC==cr,]
#Global Data
library("shiny")
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2016)
)
)
)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2016)
),
mainPanel("distPlot")
)
)
server<-fucntion(){
}
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2016)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2015,max=2016,value=2015)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2015,max=2016,value=2015)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2015,max=2016,value=2015)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==yr,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
runApp()
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2015,max=2016,value=2015,step = 1)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==yr,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==yr,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
mainPanel(plotOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
plotOutput("crimeplot")
)
)
server<-function(input,output){
output$crimeplot<-renderPlot({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='vermaph',
token='54FD4A601A1BD3DE9BEF9C029DE35DC9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='vermaph',
token='54FD4A601A1BD3DE9BEF9C029DE35DC9',
secret='4m+iGuZlcoWE2HBeKXUduwrEmWCAZkHcApZRXykR')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('C:\Users\piyus\Desktop\NYPD_Crimes_2006-2016\app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/piyus/Desktop/NYPD_Crimes_2006-2016/app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/piyus/Desktop/NYPD_Crimes_2006-2016')
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
plotlyOutput("crimeplot")
)
)
server<-function(input,output){
output$crimeplot<-renderPlotly({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
mainPanel(plotlyOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlotly({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:5,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("New York City Crime Data from 2006-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("year","Year of Crime",min=2006,max=2016,value=2008,step = 1)
),
mainPanel(plotlyOutput("crimeplot"))
)
)
server<-function(input,output){
output$crimeplot<-renderPlotly({
nypd_yr_sorted<-nypd2[nypd2$year==input$year,]
agg_data<-aggregate(nypd_yr_sorted$CMPLNT_NUM,by=list(nypd_yr_sorted$OFNS_DESC),FUN=function(x)length(unique(x)))
colnames(agg_data)<-c("Crime","Crime count")
bar_data<-agg_data[order(agg_data$`Crime count`, decreasing = TRUE),][1:10,]
plot_ly(bar_data,x=~Crime,y=~`Crime count`,type="bar",color = ~Crime) %>% layout(xaxis= list(showticklabels = FALSE))
})
}
shinyApp(ui = ui, server = server)
rm(list=ls())
mtcars<-mtcars
View(mtcars)
library("shiny")
fit<-lm(mpg~.,data=mtcars)
plot(fit)
pairs(mtcars)
names(mtcars)
fit<-lm(mpg~cyl+disp+hp+drat+wt,data=mtcars)
names(mtcars)
fit1<-lm(mpg~.,data=mtcars)
fit2<-lm(mpg~cyl+disp+hp+drat+wt,data=mtcars)
rm(list=ls())
fit1<-lm(mpg~.,data=mtcars)
fit2<-lm(mpg~cyl+disp+hp+drat+wt,data=mtcars)
summary(fit1)
summary(fit2)
plot(fit1$residuals)
plot(fit1)
plot(fit1)
plot(fit2)
fit_cyl<-lm(mpg~cyl,data=mtcars)
fit_disp<-lm(mpg~disp,data=mtcars)
fit_hp<-lm(mpg~hp,data=mtcars)
fit_drat<-lm(mpg~drat,data=mtcars)
fit_wt<-lm(mpg~wt,data=mtcars)
plot(fit_cyl)
plot(fit_disp)
plot(fit_hp)
plot(fit_drat)
plot(fit_wt)
pairs(mtcars[,c(12,3,4,5,6)])
pairs(mtcars[,c(1,2,3,4,5,6)])
fit3<-lm(mpg~cyl+disp+I(disp)^2+drat+wt,data=mtcars)
summary(fit3)
summary(fit2)
summary(fit1)
summary(fit3)
summary(fit2)
fit3<-lm(mpg~cyl+disp+I(disp)^2+wt,data=mtcars)
summary(fit3)
pairs(mtcars[,c(9,10,11,12)])
pairs(mtcars[,c(9,10,11,12)]
)
pairs(mtcars[,c(9,10,11)]
)
pairs(mtcars[,c(1,8,9,10,11)])
fit3<-lm(mpg~cyl+disp+I(disp)^2+wt+carb,data=mtcars)
summary(fit3)
fit_carb<-lm(mpg~carb,data=mtcars)
plot(fit_carb)
fit3<-lm(mpg~cyl+disp+I(disp)^2+wt+carb+I(carb)^2,data=mtcars)
summary(fit3)
fit_disp<-lm(mpg~disp,data=mtcars)
fit3<-lm(mpg~cyl+wt+carb+I(carb)^2,data=mtcars)
summary(fit3)
plot(fit3)
?predict
predict(model,data.frame(cyl=4,wt=2.5,carb=4))
model<-lm(mpg~cyl+wt+carb+I(carb)^2,data=mtcars)
predict(model,data.frame(cyl=4,wt=2.5,carb=4))
pred<-predict(model,data.frame(cyl=4,wt=2.5,carb=4))
model<-lm(mpg~cyl+wt+carb,data=mtcars)
pred<-predict(model,data.frame(cyl=4,wt=2.5,carb=4))
summary(model)
model<-lm(mpg~cyl+wt+carb+I(carb)^2,data=mtcars)
summary(model)
model<-lm(mpg~cyl+wt+carb+I(carb)^2,data=mtcars)
summary(model)
model<-lm(mpg~cyl+wt+carb,data=mtcars)
summary(model)
model<-lm(mpg~cyl+wt+I(carb)^2,data=mtcars)
summary(model)
model<-lm(mpg~cyl+wt,data=mtcars)
summary(model)
model<-lm(mpg~cyl+wt,data=mtcars)
pred<-predict(model,data.frame(cyl=input$cyl,wt=input$wt))
range(mtcars$wt)
mtcars$wt
order(mtcars$wt, decreasing =TRUE)
mtcars$wt[order(mtcars$wt, decreasing =TRUE),]
mtcars[order(mtcars$wt, decreasing =TRUE),6]
?sliderInput
mtcars$cyl
unique(mtcars$cyl)
mtcars[order(mtcars$wt, decreasing =TRUE),6]
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
shinyUI(fluidPage(
titlePanel("Prediction of mileage based on a car's cylinder's and weight"),
sidebarLayout(
sidebarPanel(
h3("Select the number of cylinders in your car"),
selectInput("cyl1","Change the number of cylinders",list=c(4,6,8)),
h3("Select the weight of your car (Weight in 1000 lbs units)"),
sliderInput("wt1","Change car the weight here",min=1,max=6,step=0.01)
),
# Show a plot of the generated distribution
mainPanel(
h3("The estimated mileage (in Miles/(US) gallon) of your car is"),
textOutput("mpg_pred")
)
)
))
shinyUI(fluidPage(
titlePanel("Prediction of mileage based on a car's cylinder's and weight"),
sidebarLayout(
sidebarPanel(
h3("Select the number of cylinders in your car"),
selectInput("cyl1","Change the number of cylinders",choices =c(4,6,8)),
h3("Select the weight of your car (Weight in 1000 lbs units)"),
sliderInput("wt1","Change car the weight here",min=1,max=6,step=0.01)
),
# Show a plot of the generated distribution
mainPanel(
h3("The estimated mileage (in Miles/(US) gallon) of your car is"),
textOutput("mpg_pred")
)
)
))
shinyUI(fluidPage(
titlePanel("Prediction of mileage based on a car's cylinder's and weight"),
sidebarLayout(
sidebarPanel(
h3("Select the number of cylinders in your car"),
selectInput("cyl1","Change the number of cylinders",choices =c(4,6,8),value=4),
h3("Select the weight of your car (Weight in 1000 lbs units)"),
sliderInput("wt1","Change car the weight here",min=1,max=6,step=0.01)
),
# Show a plot of the generated distribution
mainPanel(
h3("The estimated mileage (in Miles/(US) gallon) of your car is"),
textOutput("mpg_pred")
)
)
))
library("shiny")
shinyUI(fluidPage(
titlePanel("Prediction of mileage based on a car's cylinder's and weight"),
sidebarLayout(
sidebarPanel(
h3("Select the number of cylinders in your car"),
selectInput("cyl1","Change the number of cylinders",choices =c(4,6,8),value=4),
h3("Select the weight of your car (Weight in 1000 lbs units)"),
sliderInput("wt1","Change car the weight here",min=1,max=6,step=0.01,value=3)
),
# Show a plot of the generated distribution
mainPanel(
h3("The estimated mileage (in Miles/(US) gallon) of your car is"),
textOutput("mpg_pred")
)
)
))
shinyUI(fluidPage(
titlePanel("Prediction of mileage based on a car's cylinder's and weight"),
sidebarLayout(
sidebarPanel(
h3("Select the number of cylinders in your car"),
selectInput("cyl1","Change the number of cylinders",choices =c(4,6,8),value=4),
h3("Select the weight of your car (Weight in 1000 lbs units)"),
sliderInput("wt1","Change car the weight here",min=1,max=6,step=0.01,value=3)
)),
# Show a plot of the generated distribution
mainPanel(
h3("The estimated mileage (in Miles/(US) gallon) of your car is"),
textOutput("mpg_pred")
)
)
)
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
runApp('C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4')
?titlePanel
setwd("C:/0000/05 Github/Mini-Projects/Mini-Projects-master/Developing Data Products/Week4")
list.fiels()
list.files()
runApp()
list.fiels()
list.files()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
list.files
list.files()
