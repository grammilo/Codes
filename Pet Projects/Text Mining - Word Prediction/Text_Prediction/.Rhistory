r
quadgram<-NGramTokenizer(EN_corpora, Weka_control(min = 4, max = 4,delimiters = " \\r\\n\\t.,;:\"()?!"))
quadgram<-data.frame(table(quadgram))
quadgram<-quadgram[order(quadgram$Freq,decreasing = TRUE),]
names(quadgram)<-c("Word_1", "Freq")
quadgram$Word_1<-as.character(quadgram$Word_1)
s<-ggplot(data=quadgram[1:10,], aes(x = reorder(Word_1,Freq), y = Freq, fill = Word_1))
s<-s + geom_bar(stat="identity") + coord_flip() + ggtitle("Frequent Words")
s<-s + geom_text(data = trigram[1:10,], aes(x = Word_1, y = Freq, label = Freq), hjust=-1, position = "identity")
s<-s + labs(x="Frequency",y="Words")
s
length(test)
## Prediction Version 2.0 #####################################################################################################
test<-"welcome to my"
test<-removeNumbers(removePunctuation(tolower(test)))
length(test)
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my")
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my", split = " ")
test<-removeNumbers(removePunctuation(tolower(test)))
length(test)
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my", split = " ")
test<-removeNumbers(removePunctuation(tolower(test)))
length(test)
test)
test
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my", split = "\\s+")
test
test<-removeNumbers(removePunctuation(tolower(test)))
length(test)
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my", split = "\\s+")[[1]]
test
test<-removeNumbers(removePunctuation(tolower(test)))
length(test)
head(quadgram,3)
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to my world hirispora", split = "\\s+")[[1]]
test
test<-removeNumbers(removePunctuation(tolower(test)))
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to My 4 world hirispora", split = "\\s+")[[1]]
test
test<-removeNumbers(removePunctuation(tolower(test)))
test
length(test)
?identical
## Prediction Version 2.0 #####################################################################################################
test<-strsplit("welcome to My world hirispora", split = "\\s+")[[1]]   # "\\s+" is for space
test
test<-removeNumbers(removePunctuation(tolower(test)))
test
sapply(test,"[[",1)
sapply(test,"[[",1)[[1]]
sapply(test,"[[[",1)
strsplit("welcome to My world hirispora", split = " ")
quadgram_split<-strsplit("welcome to My world hirispora", split = " ")
quadgram_split
quadgram_split<-sapply(strsplit("welcome to My world hirispora", split = " "),"[[",1)
sapply(strsplit("welcome to My world hirispora", split = " "),"[[",1)
sapply(strsplit("welcome to My world hirispora", split = " "),"[[",2)
sapply(strsplit("welcome to My world hirispora", split = " "),"[[",3)
quadgram$first  <- sapply(strsplit(quadgram$Word_1, split = " "),"[[",1)
quadgram$second <- sapply(strsplit(quadgram$Word_1, split = " "),"[[",2)
quadgram$third  <- sapply(strsplit(quadgram$Word_1, split = " "),"[[",3)
quadgram$fourth <- sapply(strsplit(quadgram$Word_1, split = " "),"[[",4)
View(quadgram)
View(trigram)
trigram$first  <- sapply(strsplit(trigram$Word_1, split = " "),"[[",1)
trigram$second <- sapply(strsplit(trigram$Word_1, split = " "),"[[",2)
trigram$third  <- sapply(strsplit(trigram$Word_1, split = " "),"[[",3)
bigram$first  <- sapply(strsplit(bigram$Word_1, split = " "),"[[",1)
bigram$second <- sapply(strsplit(bigram$Word_1, split = " "),"[[",2)
unigram$first  <- sapply(strsplit(unigram$Word_1, split = " "),"[[",1)
test
test[1]
paste(test[2],test[3],sep = " ")
character(0)
if(character(0),"my test")
if(character(0)"my test")
if(character(0),as.chaarcter("my test"))
## Preparation of the user input: Splitting and Cleaning
test<-strsplit("welcome to My world hirispora", split = "\\s+")[[1]]   # "\\s+" is for space
test
test<-removeNumbers(removePunctuation(tolower(test)))
test
test<-tail(test,3)
test
## Preparation of the user input: Splitting and Cleaning
test<-strsplit("welcome to My world hirispora", split = "\\s+")[[1]]   # "\\s+" is for space
test
test<-removeNumbers(removePunctuation(tolower(test)))
test
## Back off algorithm
if (length(test) >=3) {
test<-tail(test,3)
if (identical(character(0),head(quadgram[quadgram$first == test[1] & quadgram$second == test[2] & quadgram$third == test[3],"fourth"],1)))
{
Predict(paste(test[2],test[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == test[1] & quadgram$second == test[2] & quadgram$third == test[3],"fourth"],1)
}
}
## Preparation of the user input: Splitting and Cleaning
test<-strsplit("welcome to My world hirispora", split = "\\s+")[[1]]   # "\\s+" is for space
test
Predict <- function(x){
test<-removeNumbers(removePunctuation(tolower(test)))
test
## Back off algorithm
if (length(test) >=3) {
test<-tail(test,3)
if (identical(character(0),head(quadgram[quadgram$first == test[1] & quadgram$second == test[2] & quadgram$third == test[3],"fourth"],1)))
{
Predict(paste(test[2],test[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == test[1] & quadgram$second == test[2] & quadgram$third == test[3],"fourth"],1)
}
}
if (length(test) ==2) {
test<-tail(test,2)
if (identical(character(0),head(trigram[trigram$first == test[1] & trigram$second == test[2],"third"],1)))
{
Predict(test[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == test[1] & trigram$second == test[2],"third"],1)
}
}
if (length(test) ==1) {
test<-tail(test,1)
if (identical(character(0),head(bigram[bigram$first == test[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == test[1],"second"],1)
}
}
}
Predict <- function(x){
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
## Preparation of the user input: Splitting and Cleaning
test<-strsplit("welcome to My world hirispora", split = "\\s+")[[1]]   # "\\s+" is for space
test
Predict <- function(x){
x<-strsplit(x, split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
## Preparation of the user input: Splitting and Cleaning
test<-"welcome to My world hirispora"
Predict(test)
kk<-Predict(test)
kk
## Preparation of the user input: Splitting and Cleaning
test<-"welcome to My world hirispora"
Predict <- function(x){
x<-strsplit(as.character(x), split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
Predict(test)
Predict <- function(x){
x<-strsplit(as.character(x), split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
else if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
else if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
Predict(test)
## Preparation of the user input: Splitting and Cleaning
test<-"let us"
Predict <- function(x){
x<-strsplit(as.character(x), split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
else if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
else if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
Predict(test)
test<-"looking forward"
Predict <- function(x){
x<-strsplit(as.character(x), split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x)))
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
else if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
else if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
Predict(test)
## Save files as RDS
write.csv(unigram,"./unigram.csv",row.names = FALSE)
write.csv(bigram,"./bigram.csv",row.names = FALSE)
write.csv(trigram,"./trigram.csv",row.names = FALSE)
write.csv(quadgram,"./quadgram.csv",row.names = FALSE)
list.files()
write.csv(unigram,"./unigram.csv",row.names = FALSE)
write.csv(bigram,"./bigram.csv",row.names = FALSE)
write.csv(trigram,"./trigram.csv",row.names = FALSE)
write.csv(quadgram,"./quadgram.csv",row.names = FALSE)
unigram_2<-read.csv("unigram.csv",stringsAsFactors = F)
bigram_2<-read.csv("bigram.csv",stringsAsFactors = F)
trigram_2<-read.csv("trigram.csv",stringsAsFactors = F)
quadgram_2<-read.csv("quadgram.csv",stringsAsFactors = F)
saveRDS(unigram_2,"./unigram.RData")
saveRDS(bigram_2,"./bigram.RData")
saveRDS(trigram_2,"./triigram.RData")
saveRDS(quadgram_2,"./quadgram.RData")
list.files()
shiny::runApp()
runApp()
runApp()
runApp()
test<-"I will"
Predict(test)
runApp()
runApp()
list.files()
runApp()
Predict <- function(x){
x<-strsplit(as.character(x), split = "\\s+")[[1]]   # "\\s+" is for space
x<-removeNumbers(removePunctuation(tolower(x))) # Preparation of the user input: Splitting and Cleaning
x
## Back off algorithm
if (length(x) >=3) {
x<-tail(x,3)
if (identical(character(0),head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)))
{
Predict(paste(x[2],x[3],sep = " "))
}
else
{
display<-"Predicting word using the most popular four letter sentence"
head(quadgram[quadgram$first == x[1] & quadgram$second == x[2] & quadgram$third == x[3],"fourth"],1)
}
}
else if (length(x) ==2) {
x<-tail(x,2)
if (identical(character(0),head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)))
{
Predict(x[3])
}
else
{
display<-"Predicting word using the most popular three letter sentence"
head(trigram[trigram$first == x[1] & trigram$second == x[2],"third"],1)
}
}
else if (length(x) ==1) {
x<-tail(x,1)
if (identical(character(0),head(bigram[bigram$first == x[1],"second"],1)))
{
display<-"No match found !!! Please type some other word"
}
else
{
display<-"Predicting word using the most popular two letter sentence"
head(bigram[bigram$first == x[1],"second"],1)
}
}
}
test<-"I will"
Predict(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
list.files()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
list.files()
runApp()
runApp()
runApp()
runApp()
